DEVY GREEEN:
===============================================
Completed:
x State should not be saved from correct expr to incorrect execution
  x Becuase if incorrect, we want to re-run manually


/////////////////////////
- DEBUG: Firebase will not save to DB for some users. Saves for DG but not for devytest@mailinator.com
  --> Why?
///////////

- 

Tasks:
  - Display mode for void func buttons
    - Replace with button to trigger func. Only clicking gear should trigger debug mode -- not whole button
  
  - Refresh stats/attributes after certain funcs (or all funcs)
  - Implement/test out a few eat/work methods

  - Add gear icon to trainer picture --> activates debug mode
  - Figure out how to detect/display all JS errors. Chrome is hiding some
  - Fix return val formatting -- need more room
  - Display mode should re-run funcs before displaying them
  - On startup, tests only show a single X if not working. Otherwise nothing.
  - Also, need to somehow re-run void funcs without triggering side effects
  - Fix: Return value should not be saved to DB, func should be re-run
  - Implement page loading screen
  - Create sign out button
  - Ensure that unlocking/completion still works
  - FIX: 'Panel completed' alert coming up for previously completed panels
  - FIX: Gear icon on display table should be higher
  - FIX: table alignment
  - Action buttons change color for each step
  - Display tooltip hover above button
  - Make tooltip source code font smaller

QA:
  - Debug all cloud9 issues
    - ensure that user data is properly saved

Curriculum/Content:
  - New app tags for app functions (before trainer created)
    - app season
    - app credits constructed from others
    - changeBackgroundcColor
    - create getInput() func
    - first/last/reverse name

  - Implement all features
  - Get all features on the UI
  - Write tests for all features
  - create gui libary for students
    - gui.displayIcon()

Documentation/Training:
  - Document steps for creating cloud9 workspace

Minor Bugs:
  - FIX: expressionEntered not displaying in codeEntry module when new popover created
  - Allow constructor to contain {} expressions without breaking sourceCodeTooltip regex

IDEA:
  - trainer image should start out as a placeholder image / outline of a generic person (male or female)
  - then they should use functions to render the image / set gender, etc.
  - use func tags to set trainer's appearance as app progresses
  - eye color, name, hat, clothes, etc.

/////////////////////////
Someday/Maybe:
  - Tooltip fixes:
    - Add syntax highlighting to tooltip
    - Center tooltip
    Idea:
      - Clean up chat bubble UI
      - Add parameters to chat bubble so students can:
        - set position of the chat bubble
        - set font size
        - set color (background color, text color, border color?)
  - Test Results Module Styling:
    - If ALL tests passed or not (popover color icon?)
    - Make source code popover style match test popover style 
    - See if you can reverse z-index so popovers overlap properly
      --> OR run tests in reverse order within each panel
  - Make default text color white
  - Choose fonts
  - Hide/disable buttons when not usable
  - Add sound effects 
  - Add logo
  - Button should glow while its method is running
  - Set Panel Color based on completion state (?)
    - Gray - None defined yet
    - Yellow - At least one working
    - Green - once all properties in a panel work correctly
  - Consume preferences object to
    - choose mode for each panel
    - choose global mode
    - hide

  - UI Idea:
    - Only actual code should be in monospace fonts
    - All other UI labels/buttons etc should be in sans serif or something friendly

////// Notes from 6/29 Meeting with Daniel/DavidD
  - DEBUG App on C9
    - Persistence issues
    - Live reloading (?)
    - Too many popups
    - Panel activation
  - Curric:
    - Enforce variable types in tests
    - Set limits/constraints on vars
    - Set total limit of points to allocate to trainer stats
    - Add more functions for code tags before trainer created
      - Add funcs with computation/logic, preferably a few lines
      - Gender
      - Image
      - Location
      - Cheat code / easter eggs?
      - Challenge?
      - Unlocking
    - Different kinds of exercises/objectives
      - Func declaration with empty body
      - No declaration at all -- must be added
      - Incorrect function provided with errors
      - Correct implementation that is incomplete and must be filled in
    - Try to create a consistent workflow for them to get used to
      - Going from app to code to app
    - Ask them to explain how it's working
      - Ask students to discuss/argue/compare answers
      - Let the console/code be the ultimate source of truth
    - Think about classroom layout
    - Try to give them agency
    - Ask them to diagnose what's wrong when things are broken
    - ASk students to come up with their own challenges
    - Add 'boss battle' challenge exercise at the end of each panel
    - Allocate lots of time to discuss topics
    - Listent to / explore their incorrect attempts
    - Develop explanation for their coding environment / app
    - Set up blank slate code base
    - (idea) Use git tags to have them load in the codebase at various checkpoints/preconfigured states
    - Use constructor to create trainer
    - Save the name they give to their trainer var
    - 'Platform Library Functions'
      - Eg TTS, ChatBubble, displayIcon
      - Create documentation for them to learn how to use them
      - Add more?
    - Catalog activities that a programmer typically does
      - Writing functions
      - Calling/testing functions
      - Reading documentation
      - Reading code
      - Commenting their code for others
  

//// Setup Instructions with Cloud9 & Github
  - Create github.com account
  - veryify github email
  - Go to c9.io
  - Click sign up button
  - Create account with email
  - Add SSH Key from c9 to github
  - Set up password (via email sent)
  - Click the 'create new workspace' button
  - Help them with github URL


//// Aggregated Notes
  - parent app
  - syntax reinforcement lessons
  - git book for curric
  - error messages explaining what's wrong (on exceptions)
  - user testing
  - handle the case where student has syntax errors in trainer.js
  - class analytics
  - tool for easy quizzes?
  - feature labels shouldnt match  method names exactly
  - desirable difficulties / dysfluencies...
  - elicit prior knowledge
  - help students direct their attention to what's important -- deep structure (they don't know what to pay attention to)
  - let students do quick 'think-pair-share' sessions
  - t.sayFullName() --> this.say(this.getFullName())
  - talk through how code works
  - dont be afraid of productive failure
  - when explaining classes, give multiple examples
    -> person, car, printer, etc.
  - inside the class vs outside the class
    - 'this' == 'my'

Apps:
- Trainer Studio
  - GUI starts out empty, instructs students to fill in each piece
    - trainer details
    - app details
    - buttons
  - Review of functions, basic data types, and returning data
    - GUI has 'app details' slots that need to be filled in
      - app name
      - app credits
      - app version
      - app year
      - app complete
    - Create app Details as individual functions
    - Call functions in browser console
  - Intro to ordinary objects
    - motivation: we want to define something that has multiple attributes
    - Return App Details as a single object
    - review of the data types we've used so far, but we realize none of them will work
      - numbers
      - strings
      - booleans
      - arrays (?)
    - Objects defined as a collection of related data
    - Create the trainer first as an ordinary object (i.e. not a class)
    - Get stats table working
      - stats table displays static attributes 
        (i.e. not computed by a method)
    
  - Intro to classes
    - Motivation: Now we want our trainer to DO something when we click on various buttons. But it can't because it's just data. So we introduce classes as objects that not only have data but also have methods.
  - GUI:
    - buttons to trigger predefined functions
    - command prompt to accept code to execute
    - log area to show output
  - concepts used in methods:
    - constructors and setting instance variables (requires 'this')
    - executing statements without returning anything
    - executing outside functions within a method
        - sayHi()
    - executing statements and returning something
      - getTime()
    - using a parameter passed into the function
      - say(message)
    - using local variables within the method
    - reading instance variables (requires 'this')
      - sayMotto()
      - imageFileName()
    - incrementing/updating instance variables (requires 'this')
    - calculating values in functions
    - calling other methods within a method (requires 'this')
    - more complex methods
      - e.g.: conditionals + calculation + calling other methods

- Pokemon Studio
  - Concepts:
    - more practice with objects, state etc
    - arrays,
      - selecting attacks
      - max, min, etc.
    - trainer object using pokemon object?
- Battle


========================
The Multiple Screens Idea:

To make the learning curve less steep, we break up the game into
a series of apps. Start with a demo of the full battle, showing the students what we're working towards. Then we move to
Trainer Studio, then Pokemon Studio, then Battle

  - order curriculum
=================================
New UI Concept for Trainer Studio


=================
New Trainer attributes:

- position: x, y
  - moveLeft(num)
  - moveUp(num)
  - move(x, y)
- TTS 
  - sayX() vs displayX()
  - setVoice()
  - 
============

Notes from Meeting with Dave:
- Concepts should be reinforeced as they're progressed
- Return/review concepts from previous lesson
- Insert outside exercises where necessary
- Decide on performance objective at each point in the curric
- Syntax exercises
- Syntax cheat sheet
- Fill-in-the-blank methods

==============================================
Curriculum Tasks:
  - Figure out medium for structuring curriculum
    - tags
    - link to code
    - visual
    - easy to reorder
    - allow for bookkeeping of revisiting concepts
    - Structure curriculum as graph / FSM?
    - possibilities
        - Github issues:
          - Structure around milestones
          - Order features with issue numbers / note parallel features
          - Tag functions with performance objective
      - commoncurriculum.com
      - mindjet
      - text
      - graphviz
      - custom software
      - fsm, dependency graph
  - Create concept checks / assessments / follow-up exercises
  - Decide on order of concepts
    - order functions in code based on curriculum order
    - revisit names of all functions for clarity
  - Create multiple features that require same concept
  - Label code as isolated exercise or project
  - Write isolated exercise code next to project version

Curriculum Notes:
  - Flesh out student exercises
  - Create additional exercises/explanations to explain concepts in more depth
  - Easier exercises for students to add:
    - Trainer attributes
    - Battle state methods
    - Add more battle state methods?
Note:
  - special animation when evolving?
  - look into pokemon sprites online...

 -  Note: See hand-written notes re base/complete classes
  - Setup Base Classes
    - PokemonBase
    - BattleBase
    - TrainerBase

  - Setup Student Classes
    - Empty method bodies
    - With comments spec'ing out each method
    - Commented out