DEVY GREEEN:
===============================================

Current tasks:

  - FIX: CreateTrainer activation persistence

  - FIX: attribute tests appearing twice
  - Enter triggerint 2 actions instead of 1

  - Implement app tags with popups
    - Save entries to DB
    - Activation
      - Design button
      - Go into display mode when clicked
      -
  - Label icon should be a function not an info icon
  - Only disappear on escape or completion?
  - Add border to popovers, stand out more
  - Improve syntax highlighting for source code tooltip

  - Create trainer dynamically
    - students should type in the code to create their trainer instance   
    - allow multiple trainer instances on screen
    - Implement page loading screen

  - Handle rendering/displaying void functions in display mode
    --> Maybe just turn it into a cool control panel UI?

    - UI Idea:
      - Only actual code should be in monospace fonts
      - All other UI labels/buttons etc should be in sans serif or something friendly

  - Completion/Achievements:
    - Re-implement panel completion checking based on passing all tests
    - Panel states:
      1) Start out locked
      2) Then unlocked but in 'placheholder mode' (like display mode but not working)
      3) Then put into debug/code mode
      4) Then back to display mode (now fully working)
    - Or should a button appear that the student gets to click to unlock?
    - Make unlocking announcements more attractive
  - Enhanced UX:
    - Clear correct entry on right click
    - Enable go back on escape
  - Enchanced UI:
    - Test Results Module Styling:
      - If ALL tests passed or not (popover color icon?)
      - Make source code popover style match test popover style 
      - See if you can reverse z-index so popovers overlap properly
        --> OR run tests in reverse order within each panel
    - Make default text color white
    - Choose fonts
    - Hide/disable buttons when not usable
    - Add sound effects 
    - Add logo
    - Button should glow while its method is running

    Idea:
      - Clean up chat bubble UI
      - Add parameters to chat bubble so students can:
        - set position of the chat bubble
        - set font size
        - set color (background color, text color, border color?)

  Next steps:
  
  - Implement all features
  - Get all features on the UI
  - Write tests for all features
  - ensure that user data is properly saved
  - create gui libary for students
    - gui.displayIcon()
  - Grade Report feature
    - Run/test/display all buttons
    - Provide a grade report as an overlay
      - Number of tests passed out of total
  - Document steps for creating cloud9 workspace

  - Someday/Maybe:
    - Set Panel Color based on completion state (?)
      - Gray - None defined yet
      - Yellow - At least one working
      - Green - once all properties in a panel work correctly
    - Consume preferences object to
      - choose mode for each panel
      - choose global mode
      - hide
    
////////////////////////
- Notes: (6/24)
  - sinon/mocks
  - parent app
  - syntax reinforcement lessons
  - git book for curric
  - error messages explaining what's wrong (on exceptions)
  - user testing
  - handle the case where student has syntax errors in trainer.js
  - in curric, marks features as prod failure or prod succ
  - feature labels shouldnt match  method names exactly...
  - class analytics
  - tool for easy quizzes?
  - desirable difficulties / dysfluencies...
  - elicit prior knowledge
  - help students direct their attention to what's important -- deep structure (they don't know what to pay attention to)

///////////////////////
Notes from DD Meeting 6/17/16:

- let students do quick 'think-pair-share' sessions
- t.sayFullName() --> this.say(this.getFullName())
- talk through how code works
- dont be afraid of productive failure
- when explaining classes, give multiple examples
  -> person, car, printer, etc.

  - inside the class vs outside the class
    - 'this' == 'my'
Apps:
- Trainer Studio
  - GUI starts out empty, instructs students to fill in each piece
    - trainer details
    - app details
    - buttons
  - Review of functions, basic data types, and returning data
    - GUI has 'app details' slots that need to be filled in
      - app name
      - app credits
      - app version
      - app year
      - app complete
    - Create app Details as individual functions
    - Call functions in browser console
  - Intro to ordinary objects
    - motivation: we want to define something that has multiple attributes
    - Return App Details as a single object
    - review of the data types we've used so far, but we realize none of them will work
      - numbers
      - strings
      - booleans
      - arrays (?)
    - Objects defined as a collection of related data
    - Create the trainer first as an ordinary object (i.e. not a class)
    - Get stats table working
      - stats table displays static attributes 
        (i.e. not computed by a method)
    
  - Intro to classes
    - Motivation: Now we want our trainer to DO something when we click on various buttons. But it can't because it's just data. So we introduce classes as objects that not only have data but also have methods.
  - GUI:
    - buttons to trigger predefined functions
    - command prompt to accept code to execute
    - log area to show output
  - concepts used in methods:
    - constructors and setting instance variables (requires 'this')
    - executing statements without returning anything
    - executing outside functions within a method
        - sayHi()
    - executing statements and returning something
      - getTime()
    - using a parameter passed into the function
      - say(message)
    - using local variables within the method
    - reading instance variables (requires 'this')
      - sayMotto()
      - imageFileName()
    - incrementing/updating instance variables (requires 'this')
    - calculating values in functions
    - calling other methods within a method (requires 'this')
    - more complex methods
      - e.g.: conditionals + calculation + calling other methods

- Pokemon Studio
  - Concepts:
    - more practice with objects, state etc
    - arrays,
      - selecting attacks
      - max, min, etc.
    - trainer object using pokemon object?
- Battle


========================
The Multiple Screens Idea:

To make the learning curve less steep, we break up the game into
a series of apps. Start with a demo of the full battle, showing the students what we're working towards. Then we move to
Trainer Studio, then Pokemon Studio, then Battle

  - order curriculum
=================================
New UI Concept for Trainer Studio


=================
New Trainer attributes:

- position: x, y
  - moveLeft(num)
  - moveUp(num)
  - move(x, y)
- TTS 
  - sayX() vs displayX()
  - setVoice()
  - 
============

Notes from Meeting with Dave:
- Concepts should be reinforeced as they're progressed
- Return/review concepts from previous lesson
- Insert outside exercises where necessary
- Decide on performance objective at each point in the curric
- Syntax exercises
- Syntax cheat sheet
- Fill-in-the-blank methods

==============================================
Curriculum Tasks:
  - Figure out medium for structuring curriculum
    - tags
    - link to code
    - visual
    - easy to reorder
    - allow for bookkeeping of revisiting concepts
    - Structure curriculum as graph / FSM?
    - possibilities
        - Github issues:
          - Structure around milestones
          - Order features with issue numbers / note parallel features
          - Tag functions with performance objective
      - commoncurriculum.com
      - mindjet
      - text
      - graphviz
      - custom software
      - fsm, dependency graph
  - Create concept checks / assessments / follow-up exercises
  - Decide on order of concepts
    - order functions in code based on curriculum order
    - revisit names of all functions for clarity
  - Create multiple features that require same concept
  - Label code as isolated exercise or project
  - Write isolated exercise code next to project version

Curriculum Notes:
  - Flesh out student exercises
  - Create additional exercises/explanations to explain concepts in more depth
  - Easier exercises for students to add:
    - Trainer attributes
    - Battle state methods
    - Add more battle state methods?
Note:
  - special animation when evolving?
  - look into pokemon sprites online...

 -  Note: See hand-written notes re base/complete classes
  - Setup Base Classes
    - PokemonBase
    - BattleBase
    - TrainerBase

  - Setup Student Classes
    - Empty method bodies
    - With comments spec'ing out each method
    - Commented out