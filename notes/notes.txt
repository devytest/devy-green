DEVY GREEEN:
===============================================
Completed Today:
  x FIX: return val viewer modules not displaying
  x FIX: Resetting return val doesnt preserve expr entered
  x FIX: Popover not displaying again
  x Debugging neutral return val viewer modules
  x Having return val viewer status be set by test results
  x Make test results module wider, so results fit on one line
  x FIX: Popover's positioning so that it's centered beneath return val
  x Run code on enter

NOTE: Call Silvia back / research static site generators

Current tasks:


  x On page load, tests should be re-run for code already entered and marked as passing/failing
    x Requires concurrent tape processes running
    x FIX: Leaking adding text to other popovers
    - Display popovers on startup
    - Enable dismiss all popovers


  - Enhanced UX:
    - Popovers should disappear when re-run
    - Escape key shoudl dismiss popovers
    - Clicking reset should dismiss the popover if it's open
    - Clear correct entry on right click
  - Re-implement panel completion checking based on passing all tests
  - Display source on incorrect return val modules
  - Test Results Module Styling:
    - Format 'expected/actual' text
    - if ALL tests passed or not (popover color icon?)
    - Figure out how to provide actual/expected feedback without confusing students
    - make source code popover style match test popover style 

  - Make default text color white

  - Write tests for all features


////////////////////////
  Next steps:
  
  - Implement app tags with popups
    - Create new CSS module
    - Implement js
    - Make sure code evaluation works properly
  x fix the firebase popup issue
  - DL and save firebase code (cache it)
  - Implement page loading screen
  - students should type in the code to create their trainer instance   
  - allow multiple trainer instances on screen
    in the browser
  - use cloud 9
    --> Document steps for creating cloud9 workspace
  - ensure that user data is properly saved
  - remove trainer_studio.js
  - Handle rendering/displaying void functions
  - implement all functions
  - Or should a button appear that the student gets to click to unlock?
    - consume preferences object to
      - choose mode for each panel
      - choose global mode
      - hide


  - Enable go back on escape
  - Make unlocking announcements more attractive
  - get all functions on the UI
  - Button should glow while its method is running
  - create gui libary for students
    - gui.displayIcon()
  - Set Panel Color based on completion state
    - Gray - None defined yet
    - Yellow - At least one working
    - Green - once all properties in a panel work correctly
  - Grade Report feature
    - Run/test/display all buttons
    - Provide a grade report as an overlay
      - Number of tests passed out of total
  - set up grid & positioning

===============================
Notes from DD Meeting 6/17/16:

- let students do quick 'think-pair-share' sessions
- t.sayFullName() --> this.say(this.getFullName())
- talk through how code works
- dont be afraid of productive failure
- when explaining classes, give multiple examples
  -> person, car, printer, etc.

  - inside the class vs outside the class
    - 'this' == 'my'
Apps:
- Trainer Studio
  - GUI starts out empty, instructs students to fill in each piece
    - trainer details
    - app details
    - buttons
  - Review of functions, basic data types, and returning data
    - GUI has 'app details' slots that need to be filled in
      - app name
      - app credits
      - app version
      - app year
      - app complete
    - Create app Details as individual functions
    - Call functions in browser console
  - Intro to ordinary objects
    - motivation: we want to define something that has multiple attributes
    - Return App Details as a single object
    - review of the data types we've used so far, but we realize none of them will work
      - numbers
      - strings
      - booleans
      - arrays (?)
    - Objects defined as a collection of related data
    - Create the trainer first as an ordinary object (i.e. not a class)
    - Get stats table working
      - stats table displays static attributes 
        (i.e. not computed by a method)
    
  - Intro to classes
    - Motivation: Now we want our trainer to DO something when we click on various buttons. But it can't because it's just data. So we introduce classes as objects that not only have data but also have methods.
  - GUI:
    - buttons to trigger predefined functions
    - command prompt to accept code to execute
    - log area to show output
  - concepts used in methods:
    - constructors and setting instance variables (requires 'this')
    - executing statements without returning anything
    - executing outside functions within a method
        - sayHi()
    - executing statements and returning something
      - getTime()
    - using a parameter passed into the function
      - say(message)
    - using local variables within the method
    - reading instance variables (requires 'this')
      - sayMotto()
      - imageFileName()
    - incrementing/updating instance variables (requires 'this')
    - calculating values in functions
    - calling other methods within a method (requires 'this')
    - more complex methods
      - e.g.: conditionals + calculation + calling other methods

- Pokemon Studio
  - Concepts:
    - more practice with objects, state etc
    - arrays,
      - selecting attacks
      - max, min, etc.
    - trainer object using pokemon object?
- Battle


========================
The Multiple Screens Idea:

To make the learning curve less steep, we break up the game into
a series of apps. Start with a demo of the full battle, showing the students what we're working towards. Then we move to
Trainer Studio, then Pokemon Studio, then Battle

  - order curriculum
=================================
New UI Concept for Trainer Studio

Clickable buttons that execute method calls
- e.g.: trainer.saySlogan()
- method executes
- method returns its value in place (& void funcs return nothing)
- the result is then marked correct or incorrect
- the result can then be reset or kept

- preferences object
  - pre-execute all methods
  - pre-execute basic stats
  - pre-execute money methods
  - etc.


=================
New Trainer attributes:

- position: x, y
  - moveLeft(num)
  - moveUp(num)
  - move(x, y)
- TTS 
  - sayX() vs displayX()
  - setVoice()
  - 
============

Notes from Meeting with Dave:
- Concepts should be reinforeced as they're progressed
- Return/review concepts from previous lesson
- Insert outside exercises where necessary
- Decide on performance objective at each point in the curric
- Syntax exercises
- Syntax cheat sheet
- Fill-in-the-blank methods




















====================================================
Next tasks:

- Implement
  - calculated attributes
    - Full Name
    - League
    - Weak Element
    - Favorite Color (changes background)

GUI Improvements:
  - choose fonts
  - style buttons
  - hide/disable buttons when not usable
  - remove style attr after animating pokemon to fix abs pos
  - set continue button as default focus so hitting enter key works
  - health bars
  - Add sound effects 
  - add logo

- Write unit tests
- Let player have multiple pokemon

=================================


==============================================
Curriculum Tasks:
  - Figure out medium for structuring curriculum
    - tags
    - link to code
    - visual
    - easy to reorder
    - allow for bookkeeping of revisiting concepts
    - Structure curriculum as graph / FSM?
    - possibilities
        - Github issues:
          - Structure around milestones
          - Order features with issue numbers / note parallel features
          - Tag functions with performance objective
      - commoncurriculum.com
      - mindjet
      - text
      - graphviz
      - custom software
      - fsm, dependency graph
  - Create concept checks / assessments / follow-up exercises
  - Decide on order of concepts
    - order functions in code based on curriculum order
    - revisit names of all functions for clarity
  - Create multiple features that require same concept
  - Label code as isolated exercise or project
  - Write isolated exercise code next to project version

Curriculum Notes:
  - Flesh out student exercises
  - Create additional exercises/explanations to explain concepts in more depth
  - Easier exercises for students to add:
    - Trainer attributes
    - Battle state methods
    - Add more battle state methods?
Note:
  - special animation when evolving?
  - look into pokemon sprites online...

 -  Note: See hand-written notes re base/complete classes
  - Setup Base Classes
    - PokemonBase
    - BattleBase
    - TrainerBase

  - Setup Student Classes
    - Empty method bodies
    - With comments spec'ing out each method
    - Commented out

========================================

Platform Tasks:
  - Decide on cloud9 vs HyperDev vs ...
  - Decide on unit testing framework
    - simple to run
    - pretty output
  - Set up script for students to run
  - Write unit Tests
  - Settle on mechanism for student code inside of game engine
  - Look into: persistence/saving game state

Ideas:
- Allow students to create their own pokemon classes



