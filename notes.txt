DEVY GREEEN

=================================

Refactoring Notes:
x App (Controller), Battle (Models), Gui (View)
x Refactor/Rename character
x clearly label all 'State Setup' Functions
x set 'target'/'attacker' based on id in attackResult
x Finish moving game output to battle eg startBattleMessage()
x Finish initial refactor
x Debug refactor
x Refactor attacking, make it simpler for students
x Decide on XPMultiplier for attack damage

Question to resolve:
  - How do we keep the pokemon class simple at first, while still
  providing a solid scaffolding for all future features we want to implement?
    - multiple versions
    - in-class versions exercises that build toward the impl.
    - 

Left Off:
  - Battle.js createRandomEnemies
  - Should species link to an array of forms:
    - e.g: charmander[1], charmander[2], etc.


Next task:
- Battle.js
- Flesh out student exercises
  - Finish implementation
    - Enemies dying
    - Add in accuracy
  - Document
- Finish documenting Pokemon.js
- Write unit tests
- Implement items
- Add Enemy Trainer
  - enemy trainer has enemy pokemon
- Let player have multiple pokemon

Note:
  - gui should display pokemon's element
  - special animation when evolving?
  - look into pokemon sprites online...



















========================================

Feature Brainstorm:

Easy:
- Accept/Display Name
- Calculate Score
- Display high score

Medium:
- XP multiplier
- Determine attack damage from XP
- display attack details
- update character stats at end of battle
- level up
- money system, collect coins
- Randomly spawn enemies for each battle

Hard:
- implement items
- link into zork world / adventure mode

  - randomly trigger battle
  - enter/exit combat mode
  - health
  - experience points
  - attack points
  - different kinds of attacks for each character
  - multiple pokemon
  - multiple enemies
  - gain experience points
  - items to pickup: first aid kit, new weapon/attack

  classes:
  item
  weapon
  character/entity/ 

Implementation Notes:
- improve UI, animations

Curriculum Tasks:
  - Decide on order of concepts
  - Create multiple features that require same concept
  - Label code as isolated exercise or project
  - Write isolated exercise code next to project version

Platform Tasks:
  - Confirm cloud9
  - Decide on unit testing framework
    - simple to run
    - pretty output
  - Set up script for students to run
  - Write unit Tests
  - Settle on mechanism for student code inside of game engine
  - Look into: persistence/saving game state

Ideas:
- Allow students to create their own pokemon classes

=====================================
Curriculum:
Lesson Plan Outline:

- introduce new feature to implement
- present concepts needded to implement features 
  -  exercises, 
  - examples, 
  - drills 
- use concepts: to implement feature in project:
  - as a class, write high-level pseudo code (plan)
  - unit tests and run game to know when theyre done

