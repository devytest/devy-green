DEVY GREEEN

=================================

Refactoring Notes:
x App (Controller), Battle (Models), Gui (View)
x Refactor/Rename character
x clearly label all 'State Setup' Functions
x set 'target'/'attacker' based on id in attackResult
x Finish moving game output to battle eg startBattleMessage()
x Finish initial refactor
x Debug refactor
x Refactor attacking, make it simpler for students
x Decide on XPMultiplier for attack damage
x Should species link to an array of forms:
  - e.g: charmander[1], charmander[2], etc.
x Add in enemy trainer
x Added new images



Left Off:
  - Just added enemy trainer. Debugging
  - Print out whether attack hit or missed


Next tasks:
- Battle.js
  - Enemies dying
  - Add in accuracy
- Pokemon.js
  x Finish constructor/initialization
  - Finish debugging pokemon.js
  - Finish documenting Pokemon.js

- Flesh out student exercises
  - Finish implementation
  - Document

 -  Note: See hand-written notes re base/complete classes
  - Setup Base Classes
    - PokemonBase
    - BattleBase
    - TrainerBase

  - Setup Student Classes
    - Empty method bodies
    - With comments spec'ing out each method
    - Commented out

GUI Fixes:
  - health bars in GUI
  - hide/disable buttons when not usable
  - remove style attr after animating pokemon to fix abs pos
  - set continue button as default focus so hitting enter key works
  - make entire message area clickable to continue

- Write unit tests
- Implement items
- Add Enemy Trainer
  - enemy trainer has enemy pokemon
- Let player have multiple pokemon


Note:
  - gui should display pokemon's element
  - special animation when evolving?
  - look into pokemon sprites online...



Question to resolve:
  - How do we keep the pokemon class simple at first, while still
  providing a solid scaffolding for all future features we want to implement?
    - multiple versions
    - in-class versions exercises that build toward the impl.














========================================

Feature Brainstorm:

Easy:
- Accept/Display Name
- Calculate Score
- Display high score

Medium:
- XP multiplier
- Determine attack damage from XP
- display attack details
- update character stats at end of battle
- level up
- money system, collect coins
- Randomly spawn enemies for each battle

Hard:
- implement items
- link into zork world / adventure mode

  - randomly trigger battle
  - enter/exit combat mode
  - health
  - experience points
  - attack points
  - different kinds of attacks for each character
  - multiple pokemon
  - multiple enemies
  - gain experience points
  - items to pickup: first aid kit, new weapon/attack

  classes:
  item
  weapon
  character/entity/ 

Implementation Notes:
- improve UI, animations

Curriculum Tasks:
  - Decide on order of concepts
  - Create multiple features that require same concept
  - Label code as isolated exercise or project
  - Write isolated exercise code next to project version

Platform Tasks:
  - Confirm cloud9
  - Decide on unit testing framework
    - simple to run
    - pretty output
  - Set up script for students to run
  - Write unit Tests
  - Settle on mechanism for student code inside of game engine
  - Look into: persistence/saving game state

Ideas:
- Allow students to create their own pokemon classes

=====================================
Curriculum:
Lesson Plan Outline:

- introduce new feature to implement
- present concepts needded to implement features 
  -  exercises, 
  - examples, 
  - drills 
- use concepts: to implement feature in project:
  - as a class, write high-level pseudo code (plan)
  - unit tests and run game to know when theyre done

