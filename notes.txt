DEVY GREEEN:

Curriculum Notes:
  - Flesh out student exercises
  - Create additional exercises/explanations to explain concepts in more depth
  - Easier exercises for students to add:
    - Trainer attributes
    - Battle state methods
    - Add more battle state methods?

  - Use the project as a context for learning to give concepts more meaning. Then follow up the feature implementation with an isolated exercise/quiz that tests the concept outside the project
  - project is great opportunity to give them experience reading code, comments, spec
  - follow up with exercises outside of project

====================================================
Next tasks:
  X Add trainers to UI
  X Allow students to modify the trainer's attributes
    X static attributes
    - calculated attributes
      - Full Name
      - League
  
GUI Improvements:
  - choose fonts
  - style buttons
  - hide/disable buttons when not usable
  - remove style attr after animating pokemon to fix abs pos
  - set continue button as default focus so hitting enter key works
  - health bars
  - Add sound effects 
  - make entire message area clickable to continue
  - add logo*


- Write unit tests
- Let player have multiple pokemon

Curriculum Tasks:
  - Decide on order of concepts
  - Create multiple features that require same concept
  - Label code as isolated exercise or project
  - Write isolated exercise code next to project version
Note:
  - gui should display pokemon's element
  - special animation when evolving?
  - look into pokemon sprites online...


 -  Note: See hand-written notes re base/complete classes
  - Setup Base Classes
    - PokemonBase
    - BattleBase
    - TrainerBase

  - Setup Student Classes
    - Empty method bodies
    - With comments spec'ing out each method
    - Commented out


========================================

Feature Brainstorm:

Easy:
- Accept/Display Name
- Calculate Score
- Display high score

Medium:
- XP multiplier
- Determine attack damage from XP
- display attack details
- update character stats at end of battle
- level up
- money system, collect coins
- Randomly spawn enemies for each battle

Hard:
  - randomly trigger battle
  - enter/exit combat mode
  - health
  - experience points
  - attack points
  - different kinds of attacks for each character
  - multiple pokemon
  - multiple enemies
  - gain experience points
  - items to pickup: first aid kit, new weapon/attack


Platform Tasks:
  - Confirm cloud9
  - Decide on unit testing framework
    - simple to run
    - pretty output
  - Set up script for students to run
  - Write unit Tests
  - Settle on mechanism for student code inside of game engine
  - Look into: persistence/saving game state

Ideas:
- Allow students to create their own pokemon classes

=====================================
Curriculum:
