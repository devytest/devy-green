- Course Strategy:
Students start with an application framework that creates an empty UI for a Pokemon game. But by writing code they'll get to bring the game to life.

Students start by writing high-level logic using the Pokemon/Battle classes as libraries, and eventually implement the Pokemon/Battle classes themselves.

Pokemon extends BasePokemon
Battle extends BasePokemon

For each pokemon method, unit tests check to see if the method was written by the student or by us. Points are only awarder if the method was written by the student.

- Use the project as a context for learning to give concepts more meaning. Then follow up the feature implementation with an isolated exercise/quiz that tests the concept outside the project
- project is great opportunity to give them experience reading code, comments, spec
- follow up with exercises outside of project

- Organized exercises/concepts into clusters that can be reordered. Then let students choose what order we cover the concepts within each cluster.



- Different Types of Performance Objectives:
  - read and understand similar code (e.g. trace code, determine output)
  - read and understand similar pseudocode
  - read and understand new code (e.g. trace code, determine output)
  - read and understand new pseudocode
  - write code after seeing very similar code example
  - write code after seeing somewhat similar code example
  - write code without seeing similar code example
  - modify code to perform a specific task
  - write code after being given the pseudocode
  - write the pseudocode given a spec
  - convert code to pseudocode

-code structure
  -complete (syntax correct)/incomplete (syntax incorrect; with or without blanks)/from scratch (blank page)
  -semantics correct/semantics incorrect (refers either to example code or code student is writing)
  -own code or someone else's code
  -javascript or pseudocode or requirements

-coding actions
  -commenting
  -writing
  -reviewing/reading
  -reading documentation
  -planning requirements

-cognitive resources
  -working from code (in any of the above structures)
  -from memory
  -with social support
  -with or without the ability to run the code

-difficulty
  -gap between your knowledge and the task at hand
  -using the code for the same purpose or a different purpose
  
-concepts (scope & sequence)
  -functions (calling functions, creating functions, combining functions)

- Curriculum Order:
- Intro to the Pokemon World and its Rules
  - Demo fully-working version of the game
- Intro to the Dev Environement
  - Files
  - Where they write their code
  - Where they preview/run in it
- Intro to the Codebase
  - Writing code that shows up on the UI
    - Generating messages in Battle.js
- Intro to objects
  - intro to objects and object syntax
    - defining what objects are
    - how to use them
      - trainer as example
      - Editing attributes of the trainers (preview of objects)
      - battle.setupPlayer() and battle.setupEnemy()
  - using/reading objects
    - pokedex as example
    - attackedex as example
  - instantiating plain objects
    - creating the pokemon and trainer in Battle.js
- Intro to classes
  - defining what a class is
  - instantiating objects from pre-written classes
  - defining your own classes
  - calling methods that you've written (using browser console)
- writing methods for your classes
  - 'generating messages' revisited, this time using:
      - the 'this' keyword
      - method parameters
      - instance variables
      - properties of instance variables
  - methods that calculate and return values
  - methods that use other predefined methods in simple ways
  - methods that set/update object state
  - methods with conditionals
  - more complex methods
    - e.g.: conditionals + calculation + calling other methods
- arrays
  - accessing/reading a specific element
  - setting an element
  - adding an element
  - removing an element
  - iterating through all elements
  - methods that require array iteration
    - searching
    - summing
    - filtering
    - finding max/min
    - sorting

Structure the curriculum in terms of phases/levels. For each level, the students are implementing more and more of the game logic.

  - Level 1: all game logic is implemented for them except basic object attributes and messages that will print to the GUI
    - trainer attributes (player and enemy)
    - battle state messages
      - battleStart message
      - battleOver message, etc.
    - attackResult message (uses parameters)
      - hitOrMissedMessage (uses a conditional)
      - attackDetailsMessage (param with properties)
  - Level 2:
  - Creating and populating the game with objects
    - Creating trainers
    - Creating pokemon
    
  - Adding Easier Functionality to Work On:
    - Printing UI Messages:
    - Acccepting user name
    - Choosing starting pokemon
    - Accepting enemy name
    - Generating random enemy name
    - 

Lesson Plan Outline:

- introduce new feature to implement
- present concepts needded to implement features 
  -  exercises, 
  - examples, 
  - drills 
- use concepts: to implement feature in project:
  - as a class, write high-level pseudo code (plan)
  - unit tests and run game to know when theyre done

