DEVY GREEEN

=================================

Refactoring Notes:
- App (Controller), Battle (Models), Gui (View)
- Started moving game output to battle eg startBattleMessage()
- clearly label all 'State Setup' Functions
- Turn App and GUI into classes
- Refactor/Rename character






========================================
Curriculum:



Feature Brainstorm:

Easy:
- Accept/Display Name
- Calculate Score
- Display high score

Medium:
- XP multiplier
- Determine attack damage from XP
- display attack details
- update character stats at end of battle
- level up
- money system, collect coins
- Randomly spawn enemies for each battle

Hard:
- implement items
- link into zork world / adventure mode

Implementation Notes:
- improve UI, animations

Curriculum Tasks:
- Decide on order of concepts
- Create multiple features that require same concept
- Label code as isolated exercise or project
- Write isolated exercise code next to project version

Platform Tasks:
- Confirm cloud9
- Decide on unit testing framework
  - simple to run
  - pretty output
- Set up script for students to run
- Write Unit Tests
- Settle on mechanism for student code inside of game engine
- Look into: persistence/saving game state

Ideas:
- Allow students to create their own pokemon classes

=====================================

Lesson Plan Outline:

- introduce new feature to implement
- present concepts needded to implement features 
  -  exercises, 
  - examples, 
  - drills 
- use concepts: to implement feature in project:
  - as a class, write high-level pseudo code (plan)
  - unit tests and run game to know when theyre done


features:
- randomly trigger battle
- enter/exit combat mode
- health
- experience points
- attack points
- different kinds of attacks for each character
- multiple pokemon
- multiple enemies
- gain experience points
- items to pickup: first aid kit, new weapon/attack

classes:
item
weapon
character/entity/ 